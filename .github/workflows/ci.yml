on: [push, pull_request]
name: Continuous Integration
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  inspect-code:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install .NET 8.0.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore Tools
        run: dotnet tool restore

      - name: Restore Packages
        run: dotnet restore WPR.sln

      - name: Restore inspectcode cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/inspectcode
          key: inspectcode-${{ hashFiles('.config/dotnet-tools.json', '.github/workflows/ci.yml', 'WPR.sln*', '.editorconfig', '.globalconfig', 'CodeAnalysis/*', '**/*.csproj', '**/*.props') }}

      # Dotnet code style check (commented out for now)
      # - name: Dotnet code style
      #   run: dotnet build -c Debug -warnaserror WPR.sln -p:EnforceCodeStyleInBuild=true

      - name: InspectCode
        run: dotnet jb inspectcode $(pwd)/WPR.sln --no-build --output="inspectcodereport.xml" --caches-home="inspectcode" --verbosity=WARN

      - name: NVika
        run: dotnet nvika parsereport "${{github.workspace}}/inspectcodereport.xml" --treatwarningsaserrors


  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        threadingMode: ['SingleThread', 'MultiThreaded']
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install .NET 8.0.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Set OS Pretty Name
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "PRETTY_NAME=Windows" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "PRETTY_NAME=macOS" >> $GITHUB_ENV
          else
            echo "PRETTY_NAME=Linux" >> $GITHUB_ENV
          
      - name: Compile
        run: dotnet build -c Debug -warnaserror WPR.sln

      - name: Test
        run: dotnet test --no-build --configuration Debug --logger "trx;LogFileName=TestResults-${{ env.PRETTY_NAME }}-${{ matrix.threadingMode }}.trx" -- NUnit.ConsoleOut=0
        shell: pwsh
