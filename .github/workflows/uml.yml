name: Auto-Generate UML Diagrams

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  generate_uml:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install PlantUML via downloading the jar directly
      - name: Download PlantUML JAR file
        run: |
          echo "Removing any previous PlantUML JAR if it exists"
          rm -f plantuml.jar
          curl -L https://github.com/plantuml/plantuml/releases/download/v1.2024.8/plantuml-1.2024.8.jar -o plantuml.jar
          # Check if the file exists and is not corrupt
          if [ ! -f plantuml.jar ]; then
            echo "Error: PlantUML JAR file not found"
            exit 1
          fi
          echo "Successfully downloaded PlantUML JAR file"

      # Step 3: Ensure the generate_puml_from_code.sh script is executable
      - name: Make generate_puml_from_code.sh executable
        run: chmod +x ./UML/scripts/generate_puml_from_code.sh

      # Step 4: Generate PUML files for Backend and EmployeeBackend
      - name: Generate PUML files
        run: |
          mkdir -p UML/Backend
          mkdir -p UML/BackendEmployee
          ./UML/scripts/generate_puml_from_code.sh ./backend/src UML/Backend/backend.puml
          ./UML/scripts/generate_puml_from_code.sh ./employeeBackend/src UML/BackendEmployee/employeeBackend.puml

      # Step 5: Debugging: Check file encoding and hidden characters
      - name: Check file encoding and hidden characters (backend.puml)
        run: |
          file -i UML/Backend/backend.puml
          cat -A UML/Backend/backend.puml

      - name: Check file encoding and hidden characters (employeeBackend.puml)
        run: |
          file -i UML/BackendEmployee/employeeBackend.puml
          cat -A UML/BackendEmployee/employeeBackend.puml

      # Step 6: Debugging: Print PlantUML version
      - name: Print PlantUML version
        run: |
          java -jar plantuml.jar -version

      # Step 7: Debugging: Ensure Java version is compatible
      - name: Check Java version
        run: java -version

     # Step 8: Ensure the backend.puml file is simplified for testing
      - name: Simplify backend.puml for debugging
        run: |
           # Clean the file and overwrite it with valid content using printf
            printf "@startuml\n" > UML/Backend/backend_simplified.puml
            printf "class TestClass { +void testMethod() }\n" >> UML/Backend/backend_simplified.puml
            printf "class AnotherClass { +void anotherMethod() }\n" >> UML/Backend/backend_simplified.puml
            printf "TestClass -- AnotherClass\n" >> UML/Backend/backend_simplified.puml
            printf "@enduml\n" >> UML/Backend/backend_simplified.puml

            # Print the content to verify it's correct and check for hidden characters
            cat -A UML/Backend/backend_simplified.puml
        # Step 9: Generate UML Diagrams using PlantUML (with simplified file for debugging)
      - name: Generate UML Diagrams (debugging step)
        run: |
            echo "Running PlantUML with verbose output..."
            java -jar plantuml.jar -v UML/Backend/backend_simplified.puml

      # Step 10: Upload UML Diagrams as Artifacts (for further analysis)
      - name: Upload UML Diagrams as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: uml-diagrams
          path: |
            UML/Backend/backend_simplified.png
            UML/BackendEmployee/employeeBackend.png
