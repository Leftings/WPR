name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:

    strategy:
      matrix:
        os: [windows-latest, macos-latest]    # Matrix for both Windows and macOS
        configuration: [Debug, Release]

    runs-on: ${{ matrix.os }}

    env:
      Solution_Name: src/WPR.sln                  # Replace with your solution name
      # Test_Project_Path: your-test-project-path            # Replace with the path to your test project
      # Wap_Project_Directory: your-wap-project-directory     # Replace with your WAP project directory
      # Wap_Project_Path: your-wap-project-path              # Replace with your WAP project path

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install .NET Core SDK on both Windows and macOS
    - name: Install .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Set up MSBuild on Windows only
    - name: Setup MSBuild (Windows Only)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2

    # Execute unit tests (Cross-platform)
    - name: Execute Unit Tests
      run: dotnet test

    # Restore the application (Cross-platform)
    - name: Restore the application
      run: msbuild $env:WPR.sln /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Windows-specific steps for signing and packaging
    # The following steps are no longer needed since you don't have WAP or signing yet:
    #
    # - name: Decode the PFX (Windows Only)
    #   if: runner.os == 'Windows'
    #   run: |
    #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #     $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #     [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # - name: Create the app package (Windows Only)
    #   if: runner.os == 'Windows'
    #   run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #   env:
    #     Appx_Bundle: Always
    #     Appx_Bundle_Platforms: x86|x64
    #     Appx_Package_Build_Mode: StoreUpload
    #     Configuration: ${{ matrix.configuration }}

    # - name: Remove the PFX (Windows Only)
    #   if: runner.os == 'Windows'
    #   run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # - name: Upload Build Artifacts (Windows Only)
    #   if: runner.os == 'Windows'
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: MSIX Package
    #     path: ${{ env.Wap_Project_Directory }}\AppPackages
