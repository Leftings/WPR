name: Continuous Integration with UML Diagram Generation and Auto-Merge

on:
  push:
    branches:
      - '*' 
  pull_request:
    branches:
      - '*' 

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  pull-requests: write
  contents: write

jobs:
  build:
    name: Build and Test (${ matrix.os }, ${ matrix.configuration })
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        configuration: [Debug, Release]
    timeout-minutes: 30

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore Tests.Unit/Tests.Unit.csproj

      - name: Run tests
        run: dotnet test Tests.Unit/Tests.Unit.csproj --configuration ${{ matrix.configuration }} --no-restore --logger "trx;LogFileName=test-results-${{ matrix.os }}-${{ matrix.configuration }}.trx"

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: "**/test-results-*.trx"

  merge_blocker:
    name: Block Merge if Tests Fail or Auto-Merge if Pass
    runs-on: ubuntu-latest
    needs: build
    if: always()

    steps:
      - name: Debug Pull Request Event Context
        run: |
          echo "Pull request number: ${{ github.event.pull_request.number }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"

      - name: Get commit message
        id: commit_message
        run: |
          PR_COMMIT_SHA=$(curl -s "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" | jq -r '.head.sha')
          COMMIT_MESSAGE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/commits/${PR_COMMIT_SHA}" | jq -r '.commit.message')
          echo "Commit message: $COMMIT_MESSAGE"
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_ENV

      - name: Check if tests passed and block/allow merge
        run: |
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "Tests passed successfully. Merge is allowed."
            curl -X PUT \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"commit_title":"${{ env.commit_message }}","commit_message":"${{ env.commit_message }}","merge_method":"squash"}' \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/merge" || {
                echo "Failed to auto-merge. Check for conflicts or branch protection rules."
                exit 1
              }
          else
            echo "Tests failed. Merge blocked."
            exit 1
          fi

  generate_uml:
    name: Generate UML Diagrams
    runs-on: ubuntu-latest
    needs: merge_blocker
    if: needs.merge_blocker.result == 'success'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python environment
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          pip3 install -r requirements.txt # If you have any additional requirements

      - name: Run Python script to generate UML diagrams
        run: |
          python3 UML/scripts/generate_uml.py

      - name: Upload UML Diagrams as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: uml-diagrams
          path: ./UML/
